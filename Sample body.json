uber green 3FC060
Uber dark 162328

test jimmy coffee
{
  "bizId": "U-a61zpbsDNVtKm9W1aqLw",
  "bizName": "Jimmy's Coffee",
  "imageUrl": "https://s3-media1.fl.yelpcdn.com/bphoto/kQm4vvHcZdlj7JKEKtWX7g/o.jpg",
  "address1": "84 Gerrard Street W",
  "address2",
  "address3",
  "city": "Toronto",
  "country": "CA",
  "state": "ON",
  "phone": "+14167921141",
  "latitude": 43.67428196976998,
  "longitude": -79.39682006835938
}


"61aa8ec8646b96c676ad826e"

{
  "bizId": "U-a61zpbsDNVtKm9W1aqLw",
  "bizName": "Jimmy's Coffee",
  "userId": "61ababad2ed65b378c146213",
  "name": "Sarah Chan",
  "address1": "84 Gerrard Street W",
  "city": "Toronto",
  "country": "CA",
  "state": "ON",
  "mediaLinkUrl": "https://youtu.be/0ELhQZUc7Lo?t=80",
  "mediaEmbed": "",
  "phone": "+14167921141",
  "_id": "61abb2bad34aa958334ec70c",
}

{
  "bizId": "U-a61zpbsDNVtKm9W1aqLw",
  "bizName": "Jimmy's Coffee",
  "userId": "61ababad2ed65b378c146213",
  "name": "Sarah Chan",
  "address1": "84 Gerrard Street W",
  "city": "Toronto",
  "country": "CA",
  "state": "ON",
  "mediaLinkUrl": "https://youtu.be/0ELhQZUc7Lo?t=80",
  "mediaEmbed": "",
  "phone": "+14167921141",
  "_id": "61abb2bad34aa958334ec70c",
}
https://youtu.be/0ELhQZUc7Lo?t=180
{ 
  "bizId": "Nq0UHjD_cKW9UbIJplQf_g",
  "bizName": "Pow Wow Cafe",
  "imageUrl": "https://s3-media2.fl.yelpcdn.com/bphoto/BPWxfIy4Y2Hu9v07n2YLHQ/o.jpg",
  "address1": "213 Augusta Avenue",
  "address2": "",
  "address3": "",
  "city": "Toronto",
  "country": "CA",
  "state": "ON",
  "phone": "+14165517717",
  "latitude": 43.65845826670497,
  "longitude": -79.385555,
  "userId": "61ababad2ed65b378c146213",
  "name": "Sarah Chan",
  "mediaLinkUrl": "https://youtu.be/0ELhQZUc7Lo?t=80",
  "mediaEmbed": "",
}

token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MWFiYWJhZDJlZDY1YjM3OGMxNDYyMTMiLCJlbWFpbCI6InNhcmFoY2hhbkBnbWFpbC5jb20iLCJpYXQiOjE2Mzg2ODA2OTEsImV4cCI6MTYzODY4NDI5MX0.S_SF2riR_AnxsqBn_N3-Qz0bbSjwl7PyL_OQOGb9u4o

const influencerDBGetOwnInstances = async (req, res, next) => {
  const influencerId = req.params.userId;
  console.log(influencerId)
  let ownInstances;
  try {
      ownInstances = await Instance.find({ userId:influencerId }).populate('instances');
      } catch (err) {
        const error = new HttpError(
          'Fetching instances error.',
          500
        );
        return next(error);
      }
    
      if (!ownInstances || ownInstances.instances.length === 0) {
        return next(
          new HttpError('Could not find places for the provided user id.', 404)
        );
      }
    res.json({
      places: ownInstances.instances.map(place =>
        place.toObject({ getters: true })
      )
    });
}

const influencerDBGetOwnInstances = async (req, res, next) => {
  const influencerId = req.params.userId;
  console.log(userId)
  let ownInstances;
  try {
      ownInstances = await Instance.find({ userId: influencerId }).populate('instances');
      } catch (err) {
        const error = new HttpError(
          'Fetching instances error.',
          500
        );
        return next(error);
      }
    
      if (!ownInstances || ownInstances.instances.length === 0) {
        return next(
          new HttpError('Could not find places for the provided user id.', 404)
        );
      }
    res.json({
      places: ownInstances.instances.map(place =>
        place.toObject({ getters: true })
      )
    });
}

const influencerDBGetOwnInstances = async (req, res, next) => {
  let userId = req.params.userId;
  console.log(userId)

  try {
    let influencerProfile = await Influencer.findOne({ userId: userId});
    if (!influencerProfile) {
      const error = new HttpError(
        'Could not find your profile.',
        404
      );
      return next(error);
    }
    res.json({ influencerProfile: influencerProfile.toObject({ getters: true }) });
  } catch (err) {
    const error = new HttpError(
      'Something went wrong, could not find the Influencer.',
      500
    );
    return next(error);
  }
}